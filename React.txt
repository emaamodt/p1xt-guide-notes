REACT NOTES

Prop types 
	Set the type of props if you know it.
	Throws a warning message.

	EX) MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }

	Note: As of React v15.5.0, PropTypes is imported independently from React, like this:

	import React, { PropTypes } from 'react';

Accessing Props with ES6 Class Components
 -Use "this"
 EX) {this.props.data}

Stateless functional component: any function which accepts props and returns JSX
Stateless component: class that extends React.Component, but does not use internal state
Stateful component (AKA "components" or "react components"): any component that maintains its own internal state

-Minimize stateful components to limit statefulness to specific parts of application

EX of stateless components and Stateless functional components
	const Items = (props) => {
	  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>
	};

	// change code below this line
	Items.propTypes = {quantity: PropTypes.number.isRequired}
	// change code above this line

	Items.defaultProps = {
	  quantity: 0
	};

	class ShoppingCart extends React.Component {
	  constructor(props) {
	    super(props);
	  }
	  render() {
	    return <Items />
	  }
	};

State: data your app needs to know about that can change over time

CREATE A STATE
	declare a state property on the component class in its constructor
	must set the state property to a Javascript object

	this.state = {
  		name: 'Emily'
	}
	
	component will always have access to data in state in its render() method using this.state

	to access a state value w/in the return of the render method, use {}
		ex) <h1>{this.state.name}</h1>
	Can also render state in the render section before return
		ex) class MyComponent extends React.Component {
			  constructor(props) {
			    super(props);
			    this.state = {
			      name: 'freeCodeCamp'
			    }
			  }
			  render() {
			    // change code below this line
			    const name = this.state.name;
			    // change code above this line
			    return (
			      <div>
			        { /* change code below this line */ }
			        <h1>{name}</h1>
			        { /* change code above this line */ }
			      </div>
			    );
			  }
			};

	-virtual DOM keeps track of changes, re-renders components when state updates

	-state is encapsulated/local to the component unless you pass state data to a child component as props

-Bind "this" to a class method
	set up methods that access properties of the class using this:
		1) explicitly bind this in the constructor
			ex) this.handleClick = this.handleClick.bind(this)

			ex)
			  class MyComponent extends React.Component {
			  constructor(props) {
			    super(props);
			    this.state = {
			      itemCount: 0
			    };
			    // change code below this line
			    this.addItem = this.addItem.bind(this)
			    // change code above this line
			  }
			  addItem() {
			    this.setState({
			      itemCount: this.state.itemCount + 1
			    });
			  }
			  render() {
			    return (
			      <div>
			        { /* change code below this line */ }
			        <button onClick={this.addItem}>Click Me</button>
			        { /* change code above this line */ }
			        <h1>Current Item Count: {this.state.itemCount}</h1>
			      </div>
			    );
			  }
			};

-Use State to Toggle an Element

	class MyComponent extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      visibility: false
	    };
	    // change code below this line
	    this.toggleVisibility = this.toggleVisibility.bind(this)
	    // change code above this line
	  }
	  // change code below this line
	    toggleVisibility() {
	        if (this.state.visibility) {
	          this.setState({
	            visibility: false
	          });
	        } else {
	          this.setState({
	            visibility: true
	          });          
	        }
	    }
	  // change code above this line
	  render() {
	    if (this.state.visibility) {
	      return (
	        <div>
	          <button onClick={this.toggleVisibility}>Click Me</button>
	          <h1>Now you see me!</h1>
	        </div>
	      );
	    } else {
	      return (
	        <div>
	          <button onClick={this.toggleVisibility}>Click Me</button>
	        </div>
	      );
	    }
	  }
	};

- Write a simple counter
		class Counter extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      count: 0
	    };
	    // change code below this line
	    this.increment = this.increment.bind(this)
	    this.decrement = this.decrement.bind(this)
	    this.reset = this.reset.bind(this)
	    // change code above this line
	  }
	  // change code below this line
	  increment() {
	    this.setState({
	      count: this.state.count + 1
	    });   
	  }

	  decrement() {
	    this.setState({
	      count: this.state.count - 1
	    });
	  }

	  reset() {
	    this.setState({
	      count: 0
	    });
	  }
	  // change code above this line
	  render() {
	    return (
	      <div>
	        <button className='inc' onClick={this.increment}>Increment!</button>
	        <button className='dec' onClick={this.decrement}>Decrement!</button>
	        <button className='reset' onClick={this.reset}>Reset</button>
	        <h1>Current Count: {this.state.count}</h1>
	      </div>
	    );
	  }
};

CONTROLLED INPUT
	Form elemends (input, textarea) maintain state in DOM as the user types. Can move this state into the component's state.
	User's input becomes part of application state. React controls value of input field.

	EX)
	class ControlledInput extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      input: ''
	    };
	    // change code below this line
	    this.handleChange = this.handleChange.bind(this)
	    // change code above this line
	  }
	  // change code below this line
	  handleChange(event) {
	    this.setState({
	      input: event.target.value
	    });
	  }

	  // change code above this line
	  render() {
	    return (
	      <div>
	        { /* change code below this line */}
	        <input value={this.state.input} onChange={this.handleChange}></input>
	        { /* change code above this line */}
	        <h4>Controlled Input:</h4>
	        <p>{this.state.input}</p>
	      </div>
	    );
	  }
	};

	-Can also do the same with the HTML form element
	EX)
		class MyForm extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {
		      input: '',
		      submit: ''
		    };
		    this.handleChange = this.handleChange.bind(this);
		    this.handleSubmit = this.handleSubmit.bind(this);
		  }
		  handleChange(event) {
		    this.setState({
		      input: event.target.value
		    });
		  }
		  handleSubmit(event) {
		    // change code below this line
		    this.setState({
		      submit: this.state.input
		    });
		    event.preventDefault();
		    // change code above this line
		  }
		  render() {
		    return (
		      <div>
		        <form onSubmit={this.handleSubmit}>
		          { /* change code below this line */ }
		          <input value={this.state.input} onChange={this.handleChange}></input>
		          { /* change code above this line */ }
		          <button type='submit'>Submit!</button>
		        </form>
		        { /* change code below this line */ }
		          <h1>{this.state.submit}</h1>
		        { /* change code above this line */ }
		      </div>
		    );
		  }
		};

-Pass State as Props to Child Components
	-unidirectional flow (parent --> child)
	-Child components only receive state data they need
	-Complex stateful apps can be broken down into one or a few stateful components

	class MyApp extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      name: 'CamperBot'
	    }
	  }
	  render() {
	    return (
	       <div>
	         <Navbar name={this.state.name} />
	       </div>
	    );
	  }
	};

	class Navbar extends React.Component {
	  constructor(props) {
	    super(props);
	  }
	  render() {
	    return (
	    <div>
	      <h1>Hello, my name is: {this.props.name} </h1>
	    </div>
	    );
	  }
	};

PASS CALLBACK AS PROPS
	-You can also pass handler functions or methods to child components just like regular props

	class MyApp extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      inputValue: ''
	    }
	    this.handleChange = this.handleChange.bind(this);
	  }
	  handleChange(event) {
	    this.setState({
	      inputValue: event.target.value
	    });
	  }
	  render() {
	    return (
	       <div>
	        { /* change code below this line */ }
	        <GetInput input={this.state.inputValue} handleChange={this.handleChange}/>

	        <RenderInput input={this.state.inputValue} />

	        { /* change code above this line */ }
	       </div>
	    );
	  }
	};

	class GetInput extends React.Component {
	  constructor(props) {
	    super(props);
	  }
	  render() {
	    return (
	      <div>
	        <h3>Get Input:</h3>
	        <input
	          value={this.props.input}
	          onChange={this.props.handleChange}/>
	      </div>
	    );
	  }
	};

	class RenderInput extends React.Component {
	  constructor(props) {
	    super(props);
	  }
	  render() {
	    return (
	      <div>
	        <h3>Input Render:</h3>
	        <p>{this.props.input}</p>
	      </div>
	    );
	  }
	};

LIFECYCLE METHODS/LIFECYCLE HOOKS
	-perform actions at specific points in lifecycle of component

	componentWillMount() - Called before render() when component is being mounted to DOM

	componentDidMount() - for API calls or calls to server.
		-setState() re-renders component
		-best place to attach event listeners for specific functionality
		-synthetic event system wraps native event system, so it behaves the same regardless of browser

	componentWillReceiveProps() - called when a component is receiving new props
		-uses nextProps

	shouldComponentUpdate() - declare which components update
		-uses nextProps and nextState
		-must return boolean

	componentWillUpdate()

	componentDidUpdate() - called after component re-renders

	componentWillUnmount()

COMPONENTDIDMOUNT()
	EX)
	class MyComponent extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      activeUsers: null
	    };
	  }
	  componentDidMount() {
	    setTimeout( () => {
	      this.setState({
	        activeUsers: 1273
	      });
	    }, 2500);
	  }
	  render() {
	    return (
	      <div>
	        <h1>Active Users: {this.state.activeUsers}</h1>
	      </div>
	    );
	  }
	};

	EX) Event listeners
	class MyComponent extends React.Component {
 		constructor(props) {
		    super(props);
		    this.state = {
		      message: ''
		    };
		    this.handleEnter = this.handleEnter.bind(this);
		    this.handleKeyPress = this.handleKeyPress.bind(this);
		  }
		  // change code below this line
		  componentDidMount() {
		    document.addEventListener("keydown",this.handleKeyPress);
		  }
		  componentWillUnmount() {
		    document.removeEventListener("keydown",this.handleKeyPress);
		  }
		  // change code above this line
		  handleEnter() {
		    this.setState({
		      message: this.state.message + 'You pressed the enter key! '
		    });
		  }
		  handleKeyPress(event) {
		    if (event.keyCode === 13) {
		      this.handleEnter();
		    }
		  }
		  render() {
		    return (
		      <div>
		        <h1>{this.state.message}</h1>
		      </div>
		    );
		  }
	};

MANAGE UPDATES
	EX)
	class Dialog extends React.Component {
  		constructor(props) {
		    super(props);
		  }
		  componentWillUpdate() {
		    console.log('Component is about to update...');
		  }
		  // change code below this line
		  componentWillReceiveProps(nextProps) {
		    console.log(this.props);
		    console.log(nextProps);
		  }

		  componentDidUpdate() {
		    console.log("updated");
		  }
		  // change code above this line
		  render() {
		    return <h1>{this.props.message}</h1>
		  }
		};

		class Controller extends React.Component {
		  constructor(props) {
		    super(props);
		    this.state = {
		      message: 'First Message'
		    };
		    this.changeMessage = this.changeMessage.bind(this);
		  }
		  changeMessage() {
		    this.setState({
		      message: 'Second Message'
		    });
		  }
		  render() {
		    return (
		      <div>
		        <button onClick={this.changeMessage}>Update</button>
		        <Dialog message={this.state.message}/>
		      </div>
		    );
		  }
		};

OPTIMIZE RE-RENDERS WITH SHOULDCOMPONENTUPDATE()
	class OnlyEvens extends React.Component {
	  constructor(props) {
	    super(props);
	  }
	  shouldComponentUpdate(nextProps, nextState) {
	    console.log('Should I update?');
	     // change code below this line
	    if (nextProps.value % 2 === 0) {
	      return true;
	    }
	    else {
	      return false;
	    }  
	     // change code above this line
	  }
	  componentWillReceiveProps(nextProps) {
	    console.log('Receiving new props...');
	  }
	  componentDidUpdate() {
	    console.log('Component re-rendered.');
	  }
	  render() {
	    return <h1>{this.props.value}</h1>
	  }
	};

	class Controller extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      value: 0
	    };
	    this.addValue = this.addValue.bind(this);
	  }
	  addValue() {
	    this.setState({
	      value: this.state.value + 1
	    });
	  }
	  render() {
	    return (
	      <div>
	        <button onClick={this.addValue}>Add</button>
	        <OnlyEvens value={this.state.value}/>
	      </div>
	    );
	  }
	

INLINE STYLES
	<div style={{color: "yellow", fontSize: 16}}>Mellow Yellow</div>

	-use camelcase instead of hyphens
	-all numbers assumed to be in px unless otherwise specified
	-if you have a large set of styles, you can assign them to a style object
	EX)
		const styles = {
		  color: "purple",
		  fontSize: 40,
		  border: "2px solid purple"
		}
		// change code above this line
		class Colorful extends React.Component {
		  render() {
		    // change code below this line
		    return (
		      <div style={styles}>Style Me!</div>
		    );
		    // change code above this line
		  }
		};

ADVANCED JS in REACT RENDER METHOD
	const inputStyle = {
	  width: 235,
	  margin: 5
	}

	class MagicEightBall extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      userInput: '',
	      randomIndex: ''
	    }
	    this.ask = this.ask.bind(this);
	    this.handleChange = this.handleChange.bind(this);
	  }
	  ask() {
	    if (this.state.userInput) {
	      this.setState({
	        randomIndex: Math.floor(Math.random() * 20),
	        userInput: ''
	      });
	    }
	  }
	  handleChange(event) {
	    this.setState({
	      userInput: event.target.value
	    });
	  }
	  render() {
	    const possibleAnswers = [
	      'It is certain',
	      'It is decidedly so',
	      'Without a doubt', 
	      'Yes, definitely',
	      'You may rely on it',
	      'As I see it, yes',
	      'Outlook good',
	      'Yes',
	      'Signs point to yes',
	      'Reply hazy try again',
	      'Ask again later',
	      'Better not tell you now',
	      'Cannot predict now',
	      'Concentrate and ask again',
	      'Don\'t count on it', 
	      'My reply is no',
	      'My sources say no',
	      'Most likely',
	      'Outlook not so good',
	      'Very doubtful'
	    ];
	    const answer = possibleAnswers[this.state.randomIndex]; // << change code here
	    return (
	      <div>
	        <input
	          type="text"
	          value={this.state.userInput}
	          onChange={this.handleChange}
	          style={inputStyle} /><br />
	        <button onClick={this.ask}>
	          Ask the Magic Eight Ball!
	        </button><br />
	        <h3>Answer:</h3>
	        <p>
	          { /* change code below this line */ }
	          {answer}
	          { /* change code above this line */ }
	        </p>
	      </div>
	    );
	  }
	};

	-Render with IF/ELSE
	class MyComponent extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      display: true
	    }
	    this.toggleDisplay = this.toggleDisplay.bind(this);
	  }
	  toggleDisplay() {
	    this.setState({
	      display: !this.state.display
	    });
	  }
	  render() {
	    // change code below this line
	    if (this.state.display) {   
	    return (
	       <div>
	         <button onClick={this.toggleDisplay}>Toggle Display</button>
	         <h1>Displayed!</h1>
	       </div>
	    );
	    }
	    else {
	    return (
	       <div>
	         <button onClick={this.toggleDisplay}>Toggle Display</button>
	       </div>
	    );      
	    }
	  }
	};

	-Use && for more concise conditionals

	{condition && <p>markup</p>}

	If the condition is true, the markup will be returned. 
	If the condition is false, the operation will immediately return false after evaluating the condition and return nothing.
	-can include directly in JSX
	-can string multiple conditions together by writing && after each one
	EX)
	class MyComponent extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      display: true
	    }
	    this.toggleDisplay = this.toggleDisplay.bind(this);
	  }
	  toggleDisplay() {
	    this.setState({
	      display: !this.state.display
	    });
	  }
	  render() {
	    // change code below this line
	    return (
	       <div>
	         <button onClick={this.toggleDisplay}>Toggle Display</button>
	         {this.state.display && <h1>Displayed!</h1>}
	       </div>
	    );
	  }
	};

	-Ternary expressions for conditional Rendering

	condition ? expressionIfTrue : expressionIfFalse
	-can use inside JSX

	EX)

	const inputStyle = {
	  width: 235,
	  margin: 5
	}

	class CheckUserAge extends React.Component {
	  constructor(props) {
	    super(props);
	    // change code below this line
	    this.state = {
	      input: '',
	      userAge: ''
	    }
	    // change code above this line
	    this.submit = this.submit.bind(this);
	    this.handleChange = this.handleChange.bind(this);
	  }
	  handleChange(e) {
	    this.setState({
	      input: e.target.value,
	      userAge: ''
	    });
	  }
	  submit() {
	    this.setState({
	      userAge: this.state.input
	    });
	  }
	  render() {
	    const buttonOne = <button onClick={this.submit}>Submit</button>;
	    const buttonTwo = <button>You May Enter</button>;
	    const buttonThree = <button>You Shall Not Pass</button>;
	    return (
	      <div>
	        <h3>Enter Your Age to Continue</h3>
	        <input
	          style={inputStyle}
	          type="number"
	          value={this.state.input}
	          onChange={this.handleChange} /><br />
	        {
	          (this.state.userAge === '') ? buttonOne : (this.state.userAge < 18) ? buttonThree : buttonTwo
	        }
	      </div>
	    );
	  }
	};

RENDER CONDITIONALLY FROM PROPS

EX)
	class Results extends React.Component {
	  constructor(props) {
	    super(props);
	  }
	  render() 
	    return (
	      <h1>
	      {
	        (this.props.fiftyFifty ? "You win!" : "You lose!")
	      }
	      </h1>
	    )
	  };
	};

	class GameOfChance extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      counter: 1
	    }
	    this.handleClick = this.handleClick.bind(this);
	  }
	  handleClick() {
	    this.setState({
	      counter: this.state.counter + 1 // change code here
	    });
	  }
	  render() {
	    let expression = Math.random() > .5; // change code here
	    return (
	      <div>
	        <button onClick={this.handleClick}>Play Again</button>
	        { /* change code below this line */ }
	        <Results fiftyFifty={expression} />
	        { /* change code above this line */ }
	        <p>{'Turn: ' + this.state.counter}</p>
	      </div>
	    );
	  }
	};

CHANGE INLINE CSS CONDITIONALLY BASED ON STATE
EX)

	class GateKeeper extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      input: ''
	    };
	    this.handleChange = this.handleChange.bind(this);
	  }
	  handleChange(event) {
	    this.setState({ input: event.target.value })
	  }
	  render() {
	    let inputStyle = {
	      border: '1px solid black'
	    };
	    // change code below this line
	   { 
	    if (this.state.input.length > 15) {
	      inputStyle = {
	        border: '3px solid red'
	      };
	    }
	   }   
	    // change code above this line
	    return (
	      <div>
	        <h3>Don't Type Too Much:</h3>
	        <input
	          type="text"
	          style={inputStyle}
	          value={this.state.input}
	          onChange={this.handleChange} />
	      </div>
	    );
	  }
	};

ARRAY.MAP() - DYNAMICALLY RENDER ELEMENTS

EX)

const textAreaStyles = {
  width: 235,
  margin: 5
};

class MyToDoList extends React.Component {
  constructor(props) {
    super(props);
    // change code below this line
    this.state = {
      userInput: '',
      toDoList: []
    };
    // change code above this line
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }
  handleSubmit() {
    const itemsArray = this.state.userInput.split(',');
    this.setState({
      toDoList: itemsArray
    });
  }
  handleChange(e) {
    this.setState({
      userInput: e.target.value
    });
  }
  render() {
    const items = this.state.toDoList.map((item) =>
      <li>{item}</li>
    );
    return (
      <div>
        <textarea
          onChange={this.handleChange}
          value={this.state.userInput}
          style={textAreaStyles}
          placeholder="Separate Items With Commas" /><br />
        <button onClick={this.handleSubmit}>Create List</button>
        <h1>My "To Do" List:</h1>
        <ul>
          {items}
        </ul>
      </div>
    );
  }
};

 -Use unique Key Attributes to itendify elements in an array
 EX)

	const frontEndFrameworks = [
	  'React',
	  'Angular',
	  'Ember',
	  'Knockout',
	  'Backbone',
	  'Vue'
	];

	function Frameworks() {
	  const renderFrameworks = frontEndFrameworks.map((framework) => <li key={framework}>{framework}</li>
	  ); // change code here
	  return (
	    <div>
	      <h1>Popular Front End JavaScript Frameworks</h1>
	      <ul>
	        {renderFrameworks}
	      </ul>
	    </div>
	  );
	};

FILTER ARRAYS DYNAMICALLY
let onlineUsers = users.filter(user => user.online);
EX)

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      users: [
        {
          username: 'Jeff',
          online: true
        },
        {
          username: 'Alan',
          online: false
        },
        {
          username: 'Mary',
          online: true
        },
        {
          username: 'Jim',
          online: false
        },
        {
          username: 'Sara',
          online: true
        },
        {
          username: 'Laura',
          online: true
        }
      ]
    }
  }
  render() {
    const usersOnline = this.state.users.filter((user) => user.online);
    const renderOnline = usersOnline.map((item) =>
    <li key={item.username}>{item.username}</li>
    ); 
    return (
       <div>
         <h1>Current Online Users:</h1>
         <ul>
           {renderOnline}
         </ul>
       </div>
    );
  }
};

RENDER REACT ON THE SERVER

class App extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return <div/>
  }
};

// change code below this line
ReactDOMServer.renderToString(<App />);
