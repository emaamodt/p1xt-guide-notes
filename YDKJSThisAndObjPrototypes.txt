Everything is not an object.
	NULL is not an object - that's a bug that says null is a typeof object

Objects
	Arrays
	Functions


Built-In Objects
	String
	Number
	Boolean
	Object
	Function
	Array
	Date
	RegExp
	Error

	Can all be used as constructors (can use "new" operator)

Primitives are temporarily coerced to objects when properties or methods are called on them

Weird exceptions:
	null and undefined have no object wrapper form. 
	Date values can only be created  w/ constructed object form
	Errors are also objects

RegExp, Array, Object, Function are all functions regardless of which form is used - USE LITERAL UNLESS YOU NEED EXTRA OPTIONS

There are no methods. Just functions. The terms are interchangeable.

There is no duplicate function!
	WORKAROUNDS:
		JSON safe objects can be duplicated with:
			var newObj = JSON.parse( JSON.stringify( someObj ) );

		For shallow copies, use ES6 Object.Assign

GETTERS AND SETTERS

	Always declare both getter and setter. Having only one leads to unexpected behavior.

ITERATORs
	The 'in' operator checks for the existence of a property name inside a container, not a the existence of a value.

	for...in - loops have weird results on arrays. Use only on objects.

	Order of iteration over object's properties is not guaranteed.

	for...of - loops over actual values in array instead of indices (ES6)
		EX) var myArray = [ 1, 2, 3 ];

				for (var v of myArray) {
					console.log( v );
				}
	You can get the @@iterator internal property of an object using an ES6 Symbol: Symbol.iterator
		Note: It is a function that returns the  iterator object, not the iterator object itself!

		regular objects don't have a built-in @@iterator, but arrays do.

		You can define an @@iterator for the object with Object.defineProperty() or [Symbol.iterator]: function(){ /* .. */ }

PROTOTYPES
	[[Prototype]] defines where the [[GET] operation should look when trying to access a property that the object doesn't have.

	All objects have built in Object.prototype at the top of the prototype chain.

	No copies are made in Javascript. Objects end up linked to each other through the Prototype chain instead.

	delegation instead of inheritance

	.isPrototypeOf(); - checks to see if one object appears anywhere in another object's prototype chain
	ex) b.isPrototypeOf(c);

	Object.getPrototypeOf(); - retrieves the prototype of the object

	most but all browsers have a.__proto__ === Foo.prototype; // true
		This wasn't standardized until ES6
		looks like a property, but is more like a getter/setter

	****USE Object.create(); to create a new object linked to a specified object. Gives us all the power of delegation w/o the mess.*****

		EX)
			var foo = {
				something: function() {
					console.log( "Tell me something good..." );
				}
			};

			var bar = Object.create( foo );

			bar.something(); // Tell me something good...

		Note: Object.create(NULL) can be used to create dictionaries.
		Can use polyfill for pre-ES5 environments

		Can add property names to new object, but not with the polyfill.

BEHAVIOR DELEGATION
